---
#- name: Check list of sudo users including sudoers.d files
#  hosts: all
#  become: yes
#  vars:
#    sudo_report_file: "/tmp/sudo_users_report_{{ inventory_hostname }}.txt"
#
#  tasks:
#
#    - name: Get sudoers entries from /etc/sudoers
#      command: grep -E '^[^#].*ALL' /etc/sudoers
#      register: sudoers_main
#      ignore_errors: true
#
#    - name: List all files in /etc/sudoers.d/
#      find:
#        paths: /etc/sudoers.d
#        file_type: file
#      register: sudoers_d_files
#      ignore_errors: true
#
#    - name: Read contents of each file in /etc/sudoers.d/
#      command: grep -Ev '^\s*#' {{ item.path }}
#      loop: "{{ sudoers_d_files.files }}"
#      loop_control:
#        label: "{{ item.path }}"
#      register: sudoers_d_content
#      ignore_errors: true
#      when: sudoers_d_files is defined and sudoers_d_files.files | length > 0
#
#    - name: Get members of 'wheel' group
#      command: getent group wheel
#      register: wheel_group
#      ignore_errors: true
#
#    - name: Get members of 'sudo' group
#      command: getent group sudo
#      register: sudo_group
#      ignore_errors: true
#
#    - name: Build sudoers.d report
#      set_fact:
#        sudoers_d_report: |
#          {% if sudoers_d_content.results is defined %}
#          {% for result in sudoers_d_content.results %}
#          ---- {{ result.item.path }} ----
#          {{ result.stdout | default('No non-comment lines') }}
#          {% endfor %}
#          {% else %}
#          No files found or accessible in /etc/sudoers.d/
#          {% endif %}
#
#    - name: Combine all sudo user info
#      set_fact:
#        sudo_report: |
#          ==== /etc/sudoers Entries ====
#          {{ sudoers_main.stdout if sudoers_main.stdout else 'No entries or inaccessible' }}
#
#          ==== /etc/sudoers.d File Entries ====
#          {{ sudoers_d_report }}
#
#          ==== Members of wheel group ====
#          {{ wheel_group.stdout if wheel_group.stdout else 'Group not found or empty' }}
#
#          ==== Members of sudo group ====
#          {{ sudo_group.stdout if sudo_group.stdout else 'Group not found or empty' }}
#
#    - name: Show sudo access summary
#      debug:
#        msg: "{{ sudo_report }}"
#
#    - name: Save sudo access summary to file on target
#      copy:
#        content: "{{ sudo_report }}"
#        dest: "{{ sudo_report_file }}"


- name: Privileged access audit report
  hosts: all
  become: yes
  vars:
    privileged_report_file: "/tmp/privileged_access_audit_{{ inventory_hostname }}.txt"

  tasks:

    - name: Get sudoers entries from /etc/sudoers
      command: grep -E '^[^#].*ALL' /etc/sudoers
      register: sudoers_main
      ignore_errors: true

    - name: List all files in /etc/sudoers.d/
      find:
        paths: /etc/sudoers.d
        file_type: file
      register: sudoers_d_files
      ignore_errors: true

    - name: Read contents of each file in /etc/sudoers.d/
      command: grep -Ev '^\s*#' {{ item.path }}
      loop: "{{ sudoers_d_files.files }}"
      loop_control:
        label: "{{ item.path }}"
      register: sudoers_d_content
      ignore_errors: true
      when: sudoers_d_files is defined and sudoers_d_files.files | length > 0

    - name: Get members of 'wheel' group
      command: getent group wheel
      register: wheel_group
      ignore_errors: true

    - name: Check if 'sudo' group exists
      shell: getent group sudo || echo 'group_not_found'
      register: sudo_group_check
      changed_when: false

    - name: Set sudo group output or fallback
      set_fact:
        sudo_group: >-
          {{
            {
              "stdout": (sudo_group_check.stdout if 'group_not_found' not in sudo_group_check.stdout else 'Group not found or empty')
            }
          }}

    - name: Build sudoers.d report
      set_fact:
        sudoers_d_report: |
          {% if sudoers_d_content.results is defined %}
          {% for result in sudoers_d_content.results %}
          ---- {{ result.item.path }} ----
          {{ result.stdout | default('No non-comment lines') }}
          {% endfor %}
          {% else %}
          No files found or accessible in /etc/sudoers.d/
          {% endif %}

    - name: Collect list of sudo users from sudoers and sudoers.d
      set_fact:
        sudo_users_list: >-
          {{
            (
              sudoers_main.stdout_lines | default([]) +
              (
                sudoers_d_content.results | default([]) | map(attribute='stdout_lines') | list | sum(start=[])
              )
            )
            | map('regex_search', '^[^#%\\s]+')  # First token of valid user lines
            | select('defined') | list | unique
          }}

    - name: Debug parsed sudo users (optional)
      debug:
        var: sudo_users_list

    - name: Check accessible directories for each sudo user (non-sudo)
      shell: |
        sudo -u {{ item }} bash -c 'find /etc /opt /usr /home /var -maxdepth 2 -type d -readable -exec ls -ld {} \; 2>/dev/null | awk "{print \$9}" | sort -u'
      loop: "{{ sudo_users_list }}"
      loop_control:
        label: "{{ item }}"
      register: sudo_user_dir_access
      ignore_errors: true

    - name: Build sudo user accessible directory report
      set_fact:
        sudo_access_dirs_report: |
          ==== Accessible Directories Per Sudo User (non-sudo) ====
          {% for result in sudo_user_dir_access.results %}
          ---- {{ result.item }} ----
          {{ result.stdout if result.stdout else 'No accessible directories found or user does not exist' }}
          {% endfor %}

    - name: Combine full privileged access report
      set_fact:
        privileged_access_report: |
          ==== /etc/sudoers Entries ====
          {{ sudoers_main.stdout if sudoers_main.stdout else 'No entries or inaccessible' }}

          ==== /etc/sudoers.d File Entries ====
          {{ sudoers_d_report }}

          ==== Members of wheel group ====
          {{ wheel_group.stdout if wheel_group.stdout else 'Group not found or empty' }}

          ==== Members of sudo group ====
          {{ sudo_group.stdout }}

          {{ sudo_access_dirs_report }}

    - name: Show privileged access audit summary
      debug:
        msg: "{{ privileged_access_report }}"

    - name: Save privileged access audit to file on target
      copy:
        content: "{{ privileged_access_report }}"
        dest: "{{ privileged_report_file }}"

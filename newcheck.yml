---
- name: Privileged Access Audit
  hosts: all
  become: true
  gather_facts: false

  vars:
    sudoers_file: /etc/sudoers
    sudoers_d_dir: /etc/sudoers.d
    sudo_report_file: "/tmp/privileged_access_audit_{{ inventory_hostname }}.txt"

  tasks:

    - name: Read /etc/sudoers file
      shell: cat {{ sudoers_file }}
      register: sudoers_main

    - name: List all files under /etc/sudoers.d
      find:
        paths: "{{ sudoers_d_dir }}"
        file_type: file
      register: sudoers_d_files

    - name: Read contents of each file in /etc/sudoers.d
      shell: cat {{ item.path }}
      loop: "{{ sudoers_d_files.files }}"
      register: sudoers_d_content
      when: sudoers_d_files.matched > 0

    - name: Combine all sudo rule lines into a single list
      set_fact:
        all_sudo_lines: >-
          {{
            sudoers_main.stdout_lines | default([]) +
            (
              sudoers_d_content.results | default([])
              | map(attribute='stdout_lines') | list
              | flatten
            )
          }}

    - name: Extract valid sudo users (excluding Defaults, %, and comments)
      set_fact:
        sudo_users_list: >-
          {{
            all_sudo_lines
            | select("match", "^[a-zA-Z0-9._-]+\\s+ALL")  # matches: username followed by 'ALL'
            | map("regex_replace", "^([a-zA-Z0-9._-]+)\\s+ALL.*", "\\1")
            | list | unique
          }}

    - name: Check members of wheel group
      shell: getent group wheel || echo 'group_not_found'
      register: wheel_group
      changed_when: false

    - name: Check if 'sudo' group exists
      shell: getent group sudo || echo 'group_not_found'
      register: sudo_group_check
      changed_when: false

    - name: Set sudo group output or fallback
      set_fact:
        sudo_group: >-
          {{
            {
              "stdout": (sudo_group_check.stdout if 'group_not_found' not in sudo_group_check.stdout else 'Group not found or empty')
            }
          }}

    - name: Check accessible directories for each sudo user
      become: false
      shell: |
        find / -type d -readable -user {{ item }} 2>/dev/null
      loop: "{{ sudo_users_list }}"
      loop_control:
        label: "{{ item }}"
      register: user_accessible_dirs
      ignore_errors: true

    - name: Build sudo user accessible directory report
      set_fact:
        sudo_user_dir_report: >-
          {%- set report = '' -%}
          {%- for result in user_accessible_dirs.results -%}
          {%- set user = result.item -%}
          {%- set dirs = result.stdout_lines | default([]) -%}
          {%- set report = report + '---- ' + user + ' ----\n' + (dirs | join('\n')) + '\n\n' -%}
          {%- endfor -%}
          {{ report }}

    - name: Combine full sudo report
      set_fact:
        sudo_report: |
          ==== /etc/sudoers Entries ====
          {{ sudoers_main.stdout }}

          ==== /etc/sudoers.d File Entries ====
          {%- for item in sudoers_d_files.files %}
          ---- {{ item.path }} ----
          {{ sudoers_d_content.results[loop.index0].stdout }}

          {%- endfor %}

          ==== Members of wheel group ====
          {{ wheel_group.stdout }}

          ==== Members of sudo group ====
          {{ sudo_group.stdout }}

          ==== Accessible Directories Per Sudo User (non-sudo) ====
          {{ sudo_user_dir_report | default('No sudo users with accessible directories found.') }}

    - name: Show sudo access summary
      debug:
        msg: "{{ sudo_report }}"

    - name: Save sudo access summary to file on target
      copy:
        content: "{{ sudo_report }}"
        dest: "{{ sudo_report_file }}"
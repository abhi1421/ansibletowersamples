---
- name: Gather all system users
  ansible.builtin.getent:
    database: passwd
  register: all_users_info

- name: Initialize usernames and home directories lists/dicts
  ansible.builtin.set_fact:
    system_users: []
    user_home_dirs: {}

- name: Populate system_users and user_home_dirs with robust checks
  ansible.builtin.set_fact:
    system_users: "{{ system_users + [ user_info.key ] }}"
    user_home_dirs: "{{ user_home_dirs | combine({user_info.key: user_info.value[5]}) }}" # HOME_DIRECTORY (Correct Index)
  loop: "{{ all_users_info.ansible_facts.getent_passwd | dict2items }}"
  loop_control:
    loop_var: user_info
  when: >
    # --- Basic Data Structure & Type Checks (should pass for all valid passwd entries) ---
    user_info.value is defined and
    user_info.value is iterable and
    user_info.value | length > 5 and # Ensure index 5 (home) and 6 (shell) exist
    user_info.value[5] is defined and user_info.value[5] is string and
    user_info.value[6] is defined and user_info.value[6] is string and

    # --- Specific Criteria for INCLUDING a user ---
    (
      user_info.key == 'root' # Explicitly include 'root' user
    )
    or
    (
      user_info.value[2] | int >= 1000 and # Include users with UID 1000 or higher (common for regular users)
      user_info.value[5].startswith('/') and # Home directory must start with '/' (a proper path)
      # Exclude common non-login shells or shells that are actually binaries
      not (user_info.value[6] in ['/sbin/nologin', '/bin/false', '/usr/sbin/nologin', '/sbinologin', '/usr/bin/nologin', '/bin', '/sbin']) and
      # Exclude home directories that are clearly not user homes but system paths or null devices
      not (user_info.value[5] in ['/bin', '/sbin', '/proc', '/dev/null', '/run', '/var/empty/sshd', '/var/lib/colord', '/var/cache/clevis', '/var/run/avahi-daemon', '/var/lib/chrony', '/var/lib/setroubleshoot', '/var/lib/dnsmasq', '/var/lib/gdm', '/run/gnome-initial-setup/', '/run/pesign', '/var/lib/rpcbind', '/var/libfs', '/var/lib/dnsmasq', '/var/lib/geoclue', '/var/spool/lpd', '/var/spool/mail', '/var/adm', '/var/ftp', '/usr/games', '/etc/unbound'])
    )

- name: Initialize privileged access report data structure
  ansible.builtin.set_fact:
    privileged_report_data:
      timestamp: "{{ ansible_date_time.iso8601 }}"
      sudo_privileges: []
      authorized_keys: []
      sensitive_directory_permissions: []
      sudoers_files_content: []

- name: Find sudoers files
  ansible.builtin.find:
    paths:
      - /etc/sudoers
      - /etc/sudoers.d
    file_type: file
    recurse: yes
  register: sudoers_files_found

- name: Read content of sudoers files
  ansible.builtin.slurp:
    src: "{{ item.path }}"
  loop: "{{ sudoers_files_found.files }}"
  loop_control:
    label: "{{ item.path }}"
  register: sudoers_files_content_raw

- name: Add sudoers files content to report
  ansible.builtin.set_fact:
    privileged_report_data: "{{ privileged_report_data | combine({
      'sudoers_files_content': privileged_report_data.sudoers_files_content + [ { 'path': item.item.path, 'content': item.content | b64decode } ]
    }) }}"
  loop: "{{ sudoers_files_content_raw.results }}"
  loop_control:
    label: "{{ item.item.path }}"
  when:
    - item.content is defined
    - item.item.path is defined

- name: Check sudo privileges for each user
  ansible.builtin.command: "sudo -l -U {{ item }}"
  become: yes
  register: user_sudo_output
  loop: "{{ system_users }}"
  loop_control:
    label: "{{ item }}"
  ignore_errors: true

- name: Process sudo output
  ansible.builtin.set_fact:
    privileged_report_data: "{{ privileged_report_data | combine({
      'sudo_privileges': privileged_report_data.sudo_privileges + [ { 'user': item.item, 'output': item.stdout | default('N/A'), 'rc': item.rc } ]
    }) }}"
  loop: "{{ user_sudo_output.results }}"
  loop_control:
    label: "{{ item.item }}"
  when: item.skipped is not defined

- name: Check authorized_keys for each user and collect data
  ansible.builtin.include_tasks: check_user_privileges.yml
  loop: "{{ system_users }}"
  loop_control:
    loop_var: current_user
    label: "Processing authorized_keys for {{ current_user }}"
  vars:
    # Pass the correctly filtered home directory to the included task
    user_specific_home_dir: "{{ user_home_dirs[current_user] }}"
  # Removed: the 'when' condition from here, as filtering is now done in 'Populate' task.
  # This makes the loop include only relevant users for authorized_keys checks.

- name: Get permissions for sensitive directories
  ansible.builtin.stat:
    path: "{{ item }}"
  register: dir_stat_results
  loop: "{{ sensitive_directories }}"
  loop_control:
    label: "{{ item }}"
  ignore_errors: true

- name: Process sensitive directory permissions
  ansible.builtin.set_fact:
    privileged_report_data: "{{ privileged_report_data | combine({
      'sensitive_directory_permissions': privileged_report_data.sensitive_directory_permissions + [ { 'path': item.item, 'owner': item.stat.pw_name | default('N/A'), 'group': item.stat.gr_name | default('N/A'), 'mode': item.stat.mode | default('N/A'), 'islnk': item.stat.islnk | default(false) } ]
    }) }}"
  loop: "{{ dir_stat_results.results }}"
  loop_control:
    label: "{{ item.item }}"
  when: item.stat is defined and not item.failed

- name: Generate privileged access audit report on target node
  ansible.builtin.template:
    src: privileged_access_report.j2
    dest: "/tmp/privileged_access_audit_report_{{ ansible_hostname }}_{{ ansible_date_time.iso8601 }}.txt"
    mode: '0600'

- name: Display path to generated report on target node
  ansible.builtin.debug:
    msg: "Privileged access audit report generated at /tmp/privileged_access_audit_report_{{ ansible_hostname }}_{{ ansible_date_time.iso8601 }}.txt on the target node."
---
#- name: Collect users with UID 0 (root/sudo)
#  ansible.builtin.shell: "awk -F: '$3 == 0 {print $1}' /etc/passwd"
#  register: root_users
#  changed_when: false
#
#- name: Collect sudo users from /etc/sudoers and /etc/sudoers.d
#  ansible.builtin.shell: |
#    grep -Po '^[^#]*\bALL\b' /etc/sudoers /etc/sudoers.d/* 2>/dev/null | grep -oP '^[a-zA-Z0-9_\-]+'
#  register: sudoers_users_raw
#  changed_when: false
#  ignore_errors: yes
#
#- name: Set sudo users list (unique)
#  ansible.builtin.set_fact:
#    sudoers_users: "{{ (sudoers_users_raw.stdout_lines | default([])) | unique }}"
#
#- name: Combine root and sudo users, unique
#  ansible.builtin.set_fact:
#    privileged_users: "{{ (root_users.stdout_lines + sudoers_users) | unique }}"
#
#- name: Get home directories for privileged users
#  ansible.builtin.shell: "getent passwd {{ item }} | cut -d: -f6"
#  loop: "{{ privileged_users }}"
#  register: home_dirs
#  changed_when: false
#
#- name: Build map of user to home directory
#  ansible.builtin.set_fact:
#    user_homes: >-
#      {{
#        dict(privileged_users | zip(home_dirs.results | map(attribute='stdout') | list))
#      }}
#
#- name: Check .ssh/authorized_keys existence and permissions
#  ansible.builtin.stat:
#    path: "{{ user_homes[item] }}/.ssh/authorized_keys"
#  loop: "{{ privileged_users }}"
#  register: ssh_auth_keys
#  ignore_errors: yes
#
#- name: Build ssh key info map for users
#  ansible.builtin.set_fact:
#    ssh_key_info: >-
#      {{
#        dict(
#          privileged_users | zip(
#            ssh_auth_keys.results | map(attribute='stat') | list
#          )
#        )
#      }}
#
#- name: Collect sudo -l output for each privileged user
#  ansible.builtin.shell: "sudo -l -U {{ item }}"
#  loop: "{{ privileged_users }}"
#  register: sudo_l_output_raw
#  ignore_errors: yes
#
#- name: Build sudo command map per user
#  ansible.builtin.set_fact:
#    sudo_l_output: >-
#      {{
#        dict(
#          privileged_users | zip(
#            sudo_l_output_raw.results | map(attribute='stdout') | list
#          )
#        )
#      }}
#
#- name: Gather directory/file permissions owned by privileged users
#  ansible.builtin.shell: |
#    find / -user {{ item }} -ls 2>/dev/null || true
#  loop: "{{ privileged_users }}"
#  register: user_files_raw
#  changed_when: false
#  ignore_errors: yes
#
#- name: Build map of user to their file listings
#  ansible.builtin.set_fact:
#    user_files: >-
#      {{
#        dict(
#          privileged_users | zip(
#            user_files_raw.results | map(attribute='stdout_lines') | list
#          )
#        )
#      }}
#
#- name: Assemble audit report content
#  ansible.builtin.template:
#    src: report.j2
#    dest: /tmp/privileged_user_access_report.txt
#    mode: '0644'
#  vars:
#    privileged_users: "{{ privileged_users }}"
#    user_homes: "{{ user_homes }}"
#    ssh_auth_keys: "{{ ssh_auth_keys }}"
#    ssh_key_info: "{{ ssh_key_info }}"
#    sudo_l_output: "{{ sudo_l_output }}"
#    user_files: "{{ user_files }}"
#
#- name: Display report path
#  ansible.builtin.debug:
#    msg: "Privileged user audit report generated at /tmp/privileged_user_access_report.txt"


# tasks file for privileged_user_audit

- name: Collect users with UID 0 (root equivalent)
  ansible.builtin.shell: "awk -F: '$3 == 0 {print $1}' /etc/passwd"
  register: root_users_raw
  changed_when: false

- name: Get all user accounts with their UIDs
  ansible.builtin.shell: "awk -F: '{print $1 \":\" $3}' /etc/passwd"
  register: all_users_uid_raw
  changed_when: false

- name: Build user to UID map
  ansible.builtin.set_fact:
    user_uid_map: |
      {% set user_uids = {} %}
      {% for line in all_users_uid_raw.stdout_lines %}
        {% set parts = line.split(':') %}
        {% if parts | length == 2 %}
          {% set _ = user_uids.update({parts[0]: parts[1]}) %}
        {% endif %}
      {% endfor %}
      {{ user_uids | to_nice_json }}

- name: Collect sudo users from /etc/sudoers and /etc/sudoers.d
  # This pattern tries to extract the username/group directly from User_Alias, Cmnd_Alias, or actual user lines
  ansible.builtin.shell: |
    (grep -Po '^(User_Alias|Cmnd_Alias|[^#\s]+)\s+.*' /etc/sudoers /etc/sudoers.d/* || true) | \
    awk '{print $1}' | sort -u
  register: sudoers_users_raw
  changed_when: false
  ignore_errors: yes

- name: Set sudo users list (unique, filter out aliases/comments)
  ansible.builtin.set_fact:
    sudoers_defined_users: >-
      {{ (sudoers_users_raw.stdout_lines | default([])) | select('match', '^[a-zA-Z0-9_-]+$') | list | unique }}

- name: Combine root and sudo users, unique
  ansible.builtin.set_fact:
    privileged_users: "{{ (root_users_raw.stdout_lines + sudoers_defined_users) | unique | sort }}"

- name: Get home directories for privileged users
  ansible.builtin.shell: "getent passwd {{ item }} | cut -d: -f6"
  loop: "{{ privileged_users }}"
  register: home_dirs_raw
  changed_when: false

- name: Build map of user to home directory
  ansible.builtin.set_fact:
    user_homes: >-
      {{
        dict(privileged_users | zip(home_dirs_raw.results | map(attribute='stdout') | list))
      }}

- name: Check .ssh/authorized_keys existence and permissions
  ansible.builtin.stat:
    path: "{{ user_homes[item] }}/.ssh/authorized_keys"
  loop: "{{ privileged_users }}"
  register: ssh_auth_keys_stats_raw
  ignore_errors: yes

- name: Build ssh key info map for users
  ansible.builtin.set_fact:
    ssh_key_info: >-
      {{
        dict(
          privileged_users | zip(
            ssh_auth_keys_stats_raw.results | map(attribute='stat') | list
          )
        )
      }}

- name: Collect sudo -l output for each privileged user
  # Use 'sudo -U <user> -l' which is preferred
  ansible.builtin.shell: "sudo -U {{ item }} -l"
  loop: "{{ privileged_users }}"
  register: sudo_l_output_raw
  ignore_errors: yes

- name: Build sudo command map per user
  ansible.builtin.set_fact:
    sudo_l_output: >-
      {{
        dict(
          privileged_users | zip(
            sudo_l_output_raw.results | map(attribute='stdout') | list
          )
        )
      }}

- name: Gather owned files (first 50 for each user, to avoid huge output)
  ansible.builtin.shell: |
    find / -user {{ item }} -ls 2>/dev/null | head -n 50 || true
  loop: "{{ privileged_users }}"
  register: user_files_raw
  changed_when: false
  ignore_errors: yes

- name: Build map of user to their file listings
  ansible.builtin.set_fact:
    user_files: >-
      {{
        dict(
          privileged_users | zip(
            user_files_raw.results | map(attribute='stdout_lines') | list
          )
        )
      }}

- name: Assemble audit report content
  ansible.builtin.template:
    src: report.j2
    dest: /tmp/privileged_user_access_report.txt
    mode: '0644'
  vars:
    # Pass all necessary variables to the template
    report_date: "{{ ansible_date_time.date }} {{ ansible_date_time.time }}"
    privileged_users_list: "{{ privileged_users }}" # Renamed to avoid confusion with loop var
    user_uid_map: "{{ user_uid_map }}"
    user_homes: "{{ user_homes }}"
    ssh_key_info: "{{ ssh_key_info }}"
    sudo_l_output: "{{ sudo_l_output }}"
    user_files: "{{ user_files }}"

- name: Display report path
  ansible.builtin.debug:
    msg: "Privileged user audit report generated at /tmp/privileged_user_access_report.txt"
# privileged_access_audit/tasks/check_user_privileges.yml
---
# TEMPORARY DEBUG TASK - TO DIAGNOSE PERSISTENT /BIN/BASH/.SSH ERROR
- name: DEBUG - Confirming exact .ssh directory path being attempted for {{ current_user }}
  ansible.builtin.debug:
    msg: "Attempted .ssh path for {{ current_user }}: '{{ user_specific_home_dir }}/.ssh'" # <--- Use user_specific_home_dir
  when:
    - user_specific_home_dir is defined
    - user_specific_home_dir is string
    - user_specific_home_dir | length > 0
    - user_specific_home_dir.startswith('/')

- name: Stat .ssh directory for {{ current_user }}
  ansible.builtin.stat:
    path: "{{ user_specific_home_dir }}/.ssh" # <--- Use user_specific_home_dir
  register: ssh_dir_stat
  ignore_errors: true
  when:
    # Only try to stat if the derived home directory is a valid-looking string
    - user_specific_home_dir is defined
    - user_specific_home_dir is string
    - user_specific_home_dir | length > 0
    - user_specific_home_dir.startswith('/')

- name: Stat authorized_keys file for {{ current_user }}
  ansible.builtin.stat:
    path: "{{ user_specific_home_dir }}/.ssh/authorized_keys" # <--- Use user_specific_home_dir
  register: auth_keys_stat
  ignore_errors: true
  when:
    - ssh_dir_stat is success
    - ssh_dir_stat.stat.exists is defined and ssh_dir_stat.stat.exists
    - ssh_dir_stat.stat.isdir is defined and ssh_dir_stat.stat.isdir

- name: Read authorized_keys content if it exists for {{ current_user }}
  ansible.builtin.slurp:
    src: "{{ user_specific_home_dir }}/.ssh/authorized_keys" # <--- Use user_specific_home_dir
  register: auth_keys_content
  when:
    - auth_keys_stat is success
    - auth_keys_stat.stat.exists is defined and auth_keys_stat.stat.exists
    - auth_keys_stat.stat.isreg is defined and auth_keys_stat.stat.isreg

- name: Add authorized_keys for {{ current_user }} to report
  ansible.builtin.set_fact:
    privileged_report_data: "{{ privileged_report_data | combine({
      'authorized_keys': privileged_report_data.authorized_keys + [ { 'user': current_user, 'path': user_specific_home_dir + '/.ssh/authorized_keys', 'content': (auth_keys_content.content | default('N/A') | b64decode) if auth_keys_content is defined and auth_keys_content.content is defined else 'N/A', 'permissions': auth_keys_stat.stat.mode | default('N/A'), 'owner': auth_keys_stat.stat.pw_name | default('N/A'), 'group': auth_keys_stat.stat.gr_name | default('N/A') } ]
    }) }}"
  when:
    - auth_keys_stat is success
    - auth_keys_stat.stat.exists is defined and auth_keys_stat.stat.exists
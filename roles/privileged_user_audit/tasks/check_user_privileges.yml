# privileged_access_audit/tasks/check_user_privileges.yml
---
# IMPORTANT: Remove this DEBUG task after successful verification. It's for troubleshooting.
- name: DEBUG - Confirming exact .ssh directory path being attempted for {{ current_user }}
  ansible.builtin.debug:
    msg: "Attempted .ssh path for {{ current_user }}: '{{ user_specific_home_dir }}/.ssh'"
  when:
    - user_specific_home_dir is defined
    - user_specific_home_dir is string
    - user_specific_home_dir | length > 0
    - user_specific_home_dir.startswith('/')

- name: Stat .ssh directory for {{ current_user }}
  ansible.builtin.stat:
    path: "{{ user_specific_home_dir }}/.ssh"
  register: ssh_dir_stat
  ignore_errors: true # Allow this task to fail if .ssh doesn't exist or is not a directory
  when:
    # Primary check: The home directory must start with / and not be a problematic system binary/device path
    - user_specific_home_dir is defined and user_specific_home_dir is string and user_specific_home_dir.startswith('/')
    - not (user_specific_home_dir in ['/bin', '/sbin', '/proc', '/dev/null', '/run', '/var/empty/sshd', '/var/lib/colord', '/var/cache/clevis', '/var/run/avahi-daemon', '/var/lib/chrony', '/var/lib/setroubleshoot', '/var/lib/dnsmasq', '/var/lib/gdm', '/run/gnome-initial-setup/', '/run/pesign', '/var/lib/rpcbind', '/var/libfs', '/var/lib/dnsmasq', '/var/lib/geoclue', '/var/spool/lpd', '/var/spool/mail', '/var/adm', '/var/ftp', '/usr/games', '/etc/unbound'])
    # Secondary check: The actual home directory must exist and be a directory (using inline stat for this check)
    - ansible.builtin.stat(user_specific_home_dir).stat.exists | default(false)
    - ansible.builtin.stat(user_specific_home_dir).stat.isdir | default(false)


- name: Stat authorized_keys file for {{ current_user }}
  ansible.builtin.stat:
    path: "{{ user_specific_home_dir }}/.ssh/authorized_keys"
  register: auth_keys_stat
  ignore_errors: true # Allow this task to fail if authorized_keys doesn't exist or is not a file
  when:
    - ssh_dir_stat is success # Ensure previous stat for .ssh was successful
    - ssh_dir_stat.stat is defined and ssh_dir_stat.stat.exists # .ssh directory path exists
    - ssh_dir_stat.stat.isdir is defined and ssh_dir_stat.stat.isdir # .ssh is indeed a directory

- name: Read authorized_keys content if it exists for {{ current_user }}
  ansible.builtin.slurp:
    src: "{{ user_specific_home_dir }}/.ssh/authorized_keys"
  register: auth_keys_content
  when:
    - auth_keys_stat is success
    - auth_keys_stat.stat is defined and auth_keys_stat.stat.exists
    - auth_keys_stat.stat.isreg is defined and auth_keys_stat.stat.isreg

- name: Add authorized_keys for {{ current_user }} to report
  ansible.builtin.set_fact:
    privileged_report_data: "{{ privileged_report_data | combine({
      'authorized_keys': privileged_report_data.authorized_keys + [ { 'user': current_user, 'path': user_specific_home_dir + '/.ssh/authorized_keys', 'content': (auth_keys_content.content | default('N/A') | b64decode) if auth_keys_content is defined and auth_keys_content.content is defined else 'N/A', 'permissions': auth_keys_stat.stat.mode | default('N/A'), 'owner': auth_keys_stat.stat.pw_name | default('N/A'), 'group': auth_keys_stat.stat.gr_name | default('N/A') } ]
    }) }}"
  when:
    - auth_keys_stat is success
    - auth_keys_stat.stat is defined and auth_keys_stat.stat.exists
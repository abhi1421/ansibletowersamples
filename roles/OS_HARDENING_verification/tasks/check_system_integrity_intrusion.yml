---
# os_hardening_verification/tasks/check_system_integrity_intrusion.yml
# This file contains tasks to verify system integrity and intrusion detection points.

- name: Check if AIDE is installed
  ansible.builtin.package:
    name: aide
    state: present
  register: aide_package_check
  check_mode: true
  ignore_errors: true
  tags:
    - system_integrity_intrusion
    - aide

- name: Check if AIDE database is initialized (basic check for file existence)
  ansible.builtin.stat:
    path: /var/lib/aide/aide.db.gz
  register: aide_db_check
  tags:
    - system_integrity_intrusion
    - aide

- name: Set fact for AIDE installation and basic configuration compliance
  ansible.builtin.set_fact:
    aide_compliant: "{{ aide_package_check.changed == false and aide_db_check.stat.exists }}"
  # AIDE package should be present (no change in check_mode) and its database should exist.
  tags:
    - system_integrity_intrusion
    - aide

- name: Define AIDE compliance item
  ansible.builtin.set_fact:
    aide_compliance_item:
      category: 'System Integrity and Intrusion Detection'
      item: 'Install and configure AIDE'
      status: '{{ "COMPLIANT" if aide_compliant else "NON_COMPLIANT" }}'
      expected: 'AIDE is installed and configured (database initialized).'
      actual: '{{ "Installed and Configured" if aide_compliant else "Not Installed or Configured" }}'
      message: '{{ "AIDE is installed and its database appears to be initialized." if aide_compliant else "AIDE is not installed or its database (/var/lib/aide/aide.db.gz) does not exist, indicating it may not be configured." }}'
  tags:
    - system_integrity_intrusion
    - aide

- name: Report AIDE compliance
  ansible.builtin.set_fact:
    compliance_report_results: "{{ compliance_report_results + [aide_compliance_item] }}"
  tags:
    - system_integrity_intrusion
    - aide

- name: Check SELinux status
  ansible.builtin.command: getenforce
  register: selinux_status
  changed_when: false
  failed_when: false
  tags:
    - system_integrity_intrusion
    - selinux

- name: Set fact for SELinux compliance
  ansible.builtin.set_fact:
    selinux_compliant: "{{ selinux_status.stdout == 'Enforcing' }}"
  # SELinux should be in enforcing mode.
  tags:
    - system_integrity_intrusion
    - selinux

- name: Define SELinux compliance item
  ansible.builtin.set_fact:
    selinux_compliance_item:
      category: 'System Integrity and Intrusion Detection'
      item: 'Configure SELinux'
      status: '{{ "COMPLIANT" if selinux_compliant else "NON_COMPLIANT" }}'
      expected: 'SELinux is configured and in enforcing mode.'
      actual: '{{ selinux_status.stdout }}'
      message: '{{ "SELinux is in enforcing mode." if selinux_compliant else "SELinux is not in enforcing mode. Current status: " + selinux_status.stdout }}'
  tags:
    - system_integrity_intrusion
    - selinux

- name: Report SELinux compliance
  ansible.builtin.set_fact:
    compliance_report_results: "{{ compliance_report_results + [selinux_compliance_item] }}"
  tags:
    - system_integrity_intrusion
    - selinux

- name: Check if OSsec HIDS agent binary exists
  ansible.builtin.stat:
    path: /var/ossec/bin/ossec-agentd # Common path for OSsec agent binary
  register: ossec_binary_check
  tags:
    - system_integrity_intrusion
    - ossec

- name: Check if OSsec service is running
  ansible.builtin.systemd:
    name: ossec
    state: started
  register: ossec_service_check
  check_mode: true
  ignore_errors: true # Service might not exist or be named differently
  tags:
    - system_integrity_intrusion
    - ossec

- name: Set fact for OSsec HIDS compliance
  ansible.builtin.set_fact:
    ossec_compliant: "{{ ossec_binary_check.stat.exists and (ossec_service_check.status.ActiveState | default('inactive')) == 'active' }}"
  # OSsec binary should exist AND its service should be active.
  tags:
    - system_integrity_intrusion
    - ossec

- name: Define OSsec HIDS compliance item
  ansible.builtin.set_fact:
    ossec_compliance_item:
      category: 'System Integrity and Intrusion Detection'
      item: 'Install and configure OSsec HIDS'
      status: '{{ "COMPLIANT" if ossec_compliant else "NON_COMPLIANT" }}'
      expected: 'OSsec HIDS is installed and running.'
      actual: '{{ "Installed and Running" if ossec_compliant else "Not Installed or Running" }}'
      message: >-
        {% if ossec_compliant %}
        OSsec HIDS agent binary found at {{ ossec_binary_check.stat.path | default('N/A') }} and its service is active.
        {% else %}
        OSsec HIDS agent binary not found at {{ ossec_binary_check.stat.path | default('N/A') }} (Exists: {{ ossec_binary_check.stat.exists | default(false) | string }}).
        OSsec service ActiveState: {{ ossec_service_check.status.ActiveState | default("N/A") }}.
        OSsec HIDS is not installed or its service is not running.
        {% endif %}
  tags:
    - system_integrity_intrusion
    - ossec

- name: Report OSsec HIDS compliance
  ansible.builtin.set_fact:
    compliance_report_results: "{{ compliance_report_results + [ossec_compliance_item] }}"
  tags:
    - system_integrity_intrusion
    - ossec

- name: Check NTP configuration (chronyd or ntpd)
  ansible.builtin.command: chronyc tracking
  register: chrony_tracking
  changed_when: false
  failed_when: false
  tags:
    - system_integrity_intrusion
    - ntp

- name: Check if ntpd is running as a fallback
  ansible.builtin.systemd:
    name: ntpd
    state: started
  register: ntpd_service_check
  check_mode: true
  ignore_errors: true
  tags:
    - system_integrity_intrusion
    - ntp

- name: Set fact for NTP compliance
  ansible.builtin.set_fact:
    ntp_compliant: "{{ (chrony_tracking.rc == 0 and 'Reference ID' in chrony_tracking.stdout) or (ntpd_service_check.status.ActiveState | default('inactive')) == 'active' }}"
  # Either chrony or ntpd should be active and synchronized.
  tags:
    - system_integrity_intrusion
    - ntp

- name: Define NTP compliance item
  ansible.builtin.set_fact:
    ntp_compliance_item:
      category: 'System Integrity and Intrusion Detection'
      item: 'Configure network time protocol (NTP)'
      status: '{{ "COMPLIANT" if ntp_compliant else "NON_COMPLIANT" }}'
      expected: 'NTP is configured and synchronized.'
      actual: '{{ "Synchronized" if ntp_compliant else "Not Synchronized" }}'
      message: '{{ "NTP (chrony or ntpd) appears to be configured and synchronized." if ntp_compliant else "NTP (chrony or ntpd) is not configured or not synchronized. Chrony status RC: " + (chrony_tracking.rc | string) + ", NTPD active: " + (ntpd_service_check.status.ActiveState | default("N/A")) }}'
  tags:
    - system_integrity_intrusion
    - ntp

- name: Report NTP compliance
  ansible.builtin.set_fact:
    compliance_report_results: "{{ compliance_report_results + [ntp_compliance_item] }}"
  tags:
    - system_integrity_intrusion
    - ntp

- name: Check if auditd is installed
  ansible.builtin.package:
    name: audit
    state: present
  register: auditd_package_check
  check_mode: true
  ignore_errors: true
  tags:
    - system_integrity_intrusion
    - auditd

- name: Check if auditd service is running
  ansible.builtin.systemd:
    name: auditd
    state: started
  register: auditd_service_check
  check_mode: true
  ignore_errors: true
  tags:
    - system_integrity_intrusion
    - auditd

- name: Set fact for auditd compliance
  ansible.builtin.set_fact:
    auditd_compliant: "{{ auditd_package_check.changed == false and auditd_service_check.changed == false }}"
  # auditd package should be present and service should be running (no change in check_mode).
  tags:
    - system_integrity_intrusion
    - auditd

- name: Define auditd compliance item
  ansible.builtin.set_fact:
    auditd_compliance_item:
      category: 'System Integrity and Intrusion Detection'
      item: 'Enable system accounting (auditd)'
      status: '{{ "COMPLIANT" if auditd_compliant else "NON_COMPLIANT" }}'
      expected: 'auditd is installed and running.'
      actual: '{{ "Installed and Running" if auditd_compliant else "Not Installed or Running" }}'
      message: '{{ "auditd is installed and its service is active." if auditd_compliant else "auditd is not installed or its service is not running." }}'
  tags:
    - system_integrity_intrusion
    - auditd

- name: Report auditd compliance
  ansible.builtin.set_fact:
    compliance_report_results: "{{ compliance_report_results + [auditd_compliance_item] }}"
  tags:
    - system_integrity_intrusion
    - auditd

- name: Check if rsyslog is installed
  ansible.builtin.package:
    name: rsyslog
    state: present
  register: rsyslog_package_check
  check_mode: true
  ignore_errors: true
  tags:
    - system_integrity_intrusion
    - rsyslog

- name: Check if rsyslog service is running
  ansible.builtin.systemd:
    name: rsyslog
    state: started
  register: rsyslog_service_check
  check_mode: true
  ignore_errors: true
  tags:
    - system_integrity_intrusion
    - rsyslog

- name: Set fact for rsyslog compliance
  ansible.builtin.set_fact:
    rsyslog_compliant: "{{ rsyslog_package_check.changed == false and rsyslog_service_check.changed == false }}"
  # rsyslog package should be present and service should be running.
  tags:
    - system_integrity_intrusion
    - rsyslog

- name: Define rsyslog compliance item
  ansible.builtin.set_fact:
    rsyslog_compliance_item:
      category: 'System Integrity and Intrusion Detection'
      item: 'Install and configure rsyslog'
      status: '{{ "COMPLIANT" if rsyslog_compliant else "NON_COMPLIANT" }}'
      expected: 'rsyslog is installed and running.'
      actual: '{{ "Installed and Running" if rsyslog_compliant else "Not Installed or Running" }}'
      message: '{{ "rsyslog is installed and its service is active." if rsyslog_compliant else "rsyslog is not installed or its service is not running." }}'
  tags:
    - system_integrity_intrusion
    - rsyslog

- name: Report rsyslog compliance
  ansible.builtin.set_fact:
    compliance_report_results: "{{ compliance_report_results + [rsyslog_compliance_item] }}"
  tags:
    - system_integrity_intrusion
    - rsyslog

- name: Define administrator/root access logging compliance item (manual)
  ansible.builtin.set_fact:
    admin_logging_compliance_item:
      category: 'System Integrity and Intrusion Detection'
      item: 'All administrator or root access must be logged'
      status: 'MANUAL_REQUIRED'
      expected: 'All administrator or root access is logged.'
      actual: 'N/A (requires manual verification)'
      message: 'Automated verification of specific logging rules for root/admin access requires manual review of /etc/audit/audit.rules or `auditctl -l` output.'
  tags:
    - system_integrity_intrusion
    - admin_logging_manual

- name: Check for administrator/root access logging (manual verification)
  ansible.builtin.debug:
    msg: |
      "Administrator/root access logging check:
      Compliance Status: MANUAL VERIFICATION REQUIRED
      Description: This requires reviewing auditd rules, sudoer configurations, and potentially SSH logs to ensure all administrator and root access attempts are logged.
      Expected: All administrator or root access is logged.
      Note: While auditd is checked for installation, specific logging rules for root/admin access require manual review of /etc/audit/audit.rules or `auditctl -l` output."
  tags:
    - system_integrity_intrusion
    - admin_logging_manual

- name: Report administrator/root access logging compliance
  ansible.builtin.set_fact:
    compliance_report_results: "{{ compliance_report_results + [admin_logging_compliance_item] }}"
  tags:
    - system_integrity_intrusion
    - admin_logging_manual

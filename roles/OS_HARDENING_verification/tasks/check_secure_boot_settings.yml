---
# os_hardening_verification/tasks/check_secure_boot_settings.yml
# This file contains tasks to verify secure boot hardening points.

- name: Check permissions and ownership of /boot/grub2/grub.cfg
  ansible.builtin.stat:
    path: /boot/grub2/grub.cfg
  register: grub_cfg_stat
  # Get file system information for grub.cfg.
  tags:
    - secure_boot_settings
    - grub_permissions

- name: Set fact for grub.cfg permissions compliance
  ansible.builtin.set_fact:
    grub_cfg_permissions_compliant: >-
      {{ grub_cfg_stat.stat.exists and
         grub_cfg_stat.stat.uid == 0 and # root owner
         grub_cfg_stat.stat.gid == 0 and # root group owner
         grub_cfg_stat.stat.mode == "0600" # -rw------- permissions
      }}
  # Check for existence, owner (root), group (root), and permissions (0600).
  tags:
    - secure_boot_settings
    - grub_permissions

- name: Report grub.cfg permissions compliance
  ansible.builtin.set_fact:
    compliance_report_results: "{{ compliance_report_results + [{
      'category': 'Secure Boot Settings',
      'item': '/boot/grub2/grub.cfg permissions',
      'status': '{{ "COMPLIANT" if grub_cfg_permissions_compliant else "NON_COMPLIANT" }}',
      'expected': 'User/group owner root, permissions read/write for root only (0600).',
      'actual': '{{ "Compliant" if grub_cfg_permissions_compliant else "Non-compliant" }}',
      'message': '{{ "Permissions and ownership for /boot/grub2/grub.cfg are correct." if grub_cfg_permissions_compliant else "Permissions or ownership for /boot/grub2/grub.cfg are incorrect. Actual mode: " + (grub_cfg_stat.stat.mode | default("N/A")) + ", Actual UID: " + (grub_cfg_stat.stat.uid | default("N/A") | string) + ", Actual GID: " + (grub_cfg_stat.stat.gid | default("N/A") | string) }}'
    }] }}"
  tags:
    - secure_boot_settings
    - grub_permissions

- name: Check boot loader password
  ansible.builtin.shell: |
    grep -E '^set superusers|^password_pbkdf2' /boot/grub2/grub.cfg || true
  register: grub_password_check
  changed_when: false
  failed_when: false
  # Look for password-related entries in grub.cfg.
  tags:
    - secure_boot_settings
    - grub_password

- name: Set fact for boot loader password compliance
  ansible.builtin.set_fact:
    boot_loader_password_compliant: "{{ grub_password_check.stdout | length > 0 }}"
  # If any password entry is found, consider it compliant (basic check).
  tags:
    - secure_boot_settings
    - grub_password

- name: Report boot loader password compliance
  ansible.builtin.set_fact:
    compliance_report_results: "{{ compliance_report_results + [{
      'category': 'Secure Boot Settings',
      'item': 'Boot loader password',
      'status': '{{ "COMPLIANT" if boot_loader_password_compliant else "NON_COMPLIANT" }}',
      'expected': 'Boot loader password is set.',
      'actual': '{{ "Password set" if boot_loader_password_compliant else "Password not set" }}',
      'message': '{{ "Boot loader password is configured in grub.cfg." if boot_loader_password_compliant else "Boot loader password is not found in grub.cfg. This is a critical security gap." }}'
    }] }}"
  tags:
    - secure_boot_settings
    - grub_password

- name: Check for X Window System removal
  ansible.builtin.package:
    name: xorg-x11-server-Xorg
    state: absent
  register: x_window_system_check
  check_mode: true # Use check_mode to avoid actual changes
  tags:
    - secure_boot_settings
    - x_window_system

- name: Set fact for X Window System removal compliance
  ansible.builtin.set_fact:
    x_window_system_compliant: "{{ x_window_system_check.changed == false }}"
  # If check_mode shows no change, it means the package is already absent.
  tags:
    - secure_boot_settings
    - x_window_system

- name: Report X Window System removal compliance
  ansible.builtin.set_fact:
    compliance_report_results: "{{ compliance_report_results + [{
      'category': 'Secure Boot Settings',
      'item': 'X Window System removal',
      'status': '{{ "COMPLIANT" if x_window_system_compliant else "NON_COMPLIANT" }}',
      'expected': 'X Window System is removed.',
      'actual': '{{ "Removed" if x_window_system_compliant else "Present" }}',
      'message': '{{ "X Window System (xorg-x11-server-Xorg) is not installed." if x_window_system_compliant else "X Window System (xorg-x11-server-Xorg) is present and should be removed." }}'
    }] }}"
  tags:
    - secure_boot_settings
    - x_window_system

- name: Check X font server disabled
  ansible.builtin.service_facts:
  # Gather service facts to check if xfs is running.
  tags:
    - secure_boot_settings
    - x_font_server

- name: Set fact for X font server compliance
  ansible.builtin.set_fact:
    x_font_server_compliant: "{{ 'xfs' not in ansible_facts.services or ansible_facts.services.xfs.state != 'running' }}"
  # Check if xfs service is not present or not running.
  tags:
    - secure_boot_settings
    - x_font_server

- name: Report X font server compliance
  ansible.builtin.set_fact:
    compliance_report_results: "{{ compliance_report_results + [{
      'category': 'Secure Boot Settings',
      'item': 'X font server disabled',
      'status': '{{ "COMPLIANT" if x_font_server_compliant else "NON_COMPLIANT" }}',
      'expected': 'X font server (xfs) is disabled.',
      'actual': '{{ "Disabled/Not Running" if x_font_server_compliant else "Running" }}',
      'message': '{{ "X font server (xfs) is disabled or not installed." if x_font_server_compliant else "X font server (xfs) is running and should be disabled." }}'
    }] }}"
  tags:
    - secure_boot_settings
    - x_font_server

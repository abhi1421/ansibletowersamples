---
# This role is designed to identify users with sudo privileges on a system.
# It does this by checking each user's sudo capabilities.

- name: Get list of all users
  ansible.builtin.getent:
    database: passwd
  register: all_users_info
  # This task uses the getent module, which is a reliable way to get user information
  # that works across different systems and authentication backends (e.g., local, LDAP).

- name: Initialize sudo users list
  ansible.builtin.set_fact:
    sudo_users: []

- name: Check for sudo privileges for each user
  ansible.builtin.shell:
    cmd: "sudo -n -l -U {{ item.key }} | grep -c 'ALL'"
    # The -n flag ensures no password prompt.
    # The -l flag lists the user's sudo privileges.
    # The -U flag specifies the user to check.
    # We grep for 'ALL' to see if they have full sudo access.
  args:
    executable: /bin/bash
  changed_when: false
  loop: "{{ all_users_info.ansible_facts.getent_passwd | dict2items }}"
  register: sudo_check_results
  # Looping through all users and running a shell command is the most reliable
  # way to check for sudo privileges across various system configurations.

- name: Add users with sudo privileges to the list
  ansible.builtin.set_fact:
    sudo_users: "{{ sudo_users + [ item.item.key ] }}"
  when: item.stdout | int > 0
  loop: "{{ sudo_check_results.results }}"
  # This task iterates through the results of the previous loop.
  # If the grep command found at least one line with 'ALL',
  # it means the user has sudo privileges, and we add them to our list.

- name: Get content of /etc/sudoers (for reporting purposes)
  ansible.builtin.slurp:
    src: /etc/sudoers
  register: sudoers_content
  # The slurp module is used to read the file content securely and base64-encode it.

- name: Find all files in /etc/sudoers.d/ (for reporting purposes)
  ansible.builtin.find:
    paths: /etc/sudoers.d/
    file_type: file
  register: sudoers_d_files
  # This finds all standard files within the directory, excluding subdirectories.

- name: Get content of sudoers.d files (for reporting purposes)
  ansible.builtin.slurp:
    src: "{{ item.path }}"
  loop: "{{ sudoers_d_files.files }}"
  register: sudoers_d_content
  # Loops through the list of files found and slurps the content of each one.

- name: Combine sudoers content for analysis
  ansible.builtin.set_fact:
    full_sudoers_content: >-
      {{
        (sudoers_content.content | b64decode) + '\n' +
        (sudoers_d_content.results | map(attribute='content') | map('b64decode') | join('\n'))
      }}
  # This task combines all the sudoer content into a single string for easier searching in the report.

- name: Generate sudo report
  ansible.builtin.template:
    src: sudo_report.j2
    dest: "/var/tmp/sudo_report_{{ ansible_hostname }}.md"
    mode: '0600'
  # This task uses the template module to generate a report file from the sudo_report.j2 template.
  # It names the file with the hostname to make it easy to identify on multiple systems.
  # The file permissions are set to read-write for the owner only to keep the information secure.

- name: Read URL list from file
  slurp:
    src: /etc/ssl_urls.txt
  register: url_file

- name: Set URL list from file content
  set_fact:
    ssl_check_urls: "{{ url_file.content | b64decode | splitlines() }}"

- name: Check SSL certificate expiry for each host
  shell: |
    echo | openssl s_client -servername {{ item.split(':')[0] }} -connect {{ item }} 2>/dev/null \
    | openssl x509 -noout -enddate | cut -d= -f2
  register: ssl_cert_results
  loop: "{{ ssl_check_urls }}"
  changed_when: false
  failed_when: false
  throttle: 5

- name: Create certificate expiry report
  copy:
    dest: "{{ ssl_check_report_file }}"
    content: "SSL Certificate Expiry Report\n\n"
    force: true

- name: Calculate expiry days
  set_fact:
    cert_expiry_date: "{{ item.stdout | trim }}"
    cert_expiry_epoch: "{{ item.stdout | trim | strftime('%s') | int }}"
    days_remaining: "{{ (cert_expiry_epoch - ansible_date_time.epoch | int) // 86400 }}"
  loop: "{{ ssl_cert_results.results }}"
  loop_control:
    label: "{{ item.item }}"
  when: item.stdout != ""

- name: Add valid result to report
  lineinfile:
    path: "{{ ssl_check_report_file }}"
    line: "{{ item.item }} => Expiry: {{ item.stdout | trim }} | Days Left: {{ ((item.stdout | trim | strftime('%s') | int - ansible_date_time.epoch | int) // 86400) }}"
    create: yes
  loop: "{{ ssl_cert_results.results }}"
  loop_control:
    label: "{{ item.item }}"
  when: item.stdout != ""

- name: Add error to report if no expiry found
  lineinfile:
    path: "{{ ssl_check_report_file }}"
    line: "{{ item.item }} => ERROR: Unable to fetch certificate"
    create: yes
  loop: "{{ ssl_cert_results.results }}"
  loop_control:
    label: "{{ item.item }}"
  when: item.stdout == ""

- name: Send report via email
  mail:
    subject: "{{ ssl_check_email_subject }}"
    to: "{{ ssl_check_email_to }}"
    body: "{{ lookup('file', ssl_check_report_file) }}"
  delegate_to: localhost
---
# tasks file for INSTALLATION_Instana_Agent

- name: Get Instana agent service facts
  ansible.builtin.systemd_service_facts:
  # This module gets information about all services,
  # which we'll use to check if 'instana-agent' exists.

- name: Check if Instana agent service exists
  ansible.builtin.set_fact:
    instana_service_exists: "{{ instana_service_name in ansible_facts.services }}"
  # Set a fact 'instana_service_exists' to true if the service name is found in systemd facts.

- name: Check if Instana agent is installed and running
  ansible.builtin.systemd:
    name: "{{ instana_service_name }}"
    state: started
  register: instana_service_status
  failed_when: false # Do not fail if service is not found or not running
  # Attempt to start the service to get its status.
  # 'failed_when: false' ensures the task doesn't stop the playbook
  # if the service isn't there or fails to start, allowing us to check 'status.rc'.

- name: Set fact for agent running status
  ansible.builtin.set_fact:
    instana_agent_running: "{{ instana_service_status.status.ActiveState == 'active' if instana_service_exists else false }}"
  # Set 'instana_agent_running' to true if the service exists and its ActiveState is 'active'.

- name: Display current Instana agent status
  ansible.builtin.debug:
    msg: "Instana agent service '{{ instana_service_name }}' exists: {{ instana_service_exists }}. Running: {{ instana_agent_running }}"

- name: Exit if Instana agent is already installed and running
  ansible.builtin.meta:
    end_play
  when: instana_service_exists and instana_agent_running
  # If the agent service exists and is running, we're done. Exit the playbook gracefully.

- name: Start Instana agent service if installed but not running
  ansible.builtin.systemd:
    name: "{{ instana_service_name }}"
    state: started
    enabled: true # Ensure it starts on boot
  when: instana_service_exists and not instana_agent_running
  # If the service exists but is not running, start it and enable it.

- name: Determine Instana RPM file based on OS architecture
  ansible.builtin.set_fact:
    instana_rpm_file: "{{ lookup('ansible.builtin.fileglob', '{{ instana_rpm_base_name }}.' + ansible_architecture + '.rpm') | first | ansible.builtin.basename }}"
  # Dynamically determine the exact RPM filename from the 'files' directory
  # based on the target host's architecture (s390x, aix, x86_64).
  # 'first' handles cases where glob might return a list.
  # 'basename' extracts just the filename.

- name: Create target directory for Instana agent files
  ansible.builtin.file:
    path: "{{ instana_target_dir }}"
    state: directory
    mode: '0755'
  # Ensure the target directory (/home/ansible by default) exists.

- name: Copy Instana agent RPM to target node
  ansible.builtin.copy:
    src: "{{ instana_rpm_file }}" # Use the dynamically determined RPM file
    dest: "{{ instana_target_dir }}/{{ instana_rpm_file }}"
    mode: '0644'
  # Copy the selected RPM to the target host's specified directory.

- name: Copy host entries file to temporary location
  ansible.builtin.copy:
    src: instana_host_entries.txt
    dest: "/tmp/instana_host_entries.txt"
    mode: '0644'
  # Copy the file containing host entries from the 'files' directory to a temporary location on the target.

- name: Add/Ensure host entries in /etc/hosts
  ansible.builtin.lineinfile:
    path: /etc/hosts
    line: "{{ item }}"
    state: present # Ensures the line is present; if it exists, it won't be added again.
    create: true # Create the file if it doesn't exist
    insertafter: EOF # Add lines at the end of the file
  loop: "{{ lookup('ansible.builtin.file', '/tmp/instana_host_entries.txt').splitlines() }}"
  # Read each line from the copied temporary file.
  # For each line, ensure it exists in /etc/hosts.
  # 'state: present' handles idempotency: if the exact line is already there, it does nothing.
  # This ensures no duplicate entries are added on re-execution.

- name: Copy environment variables file to temporary location
  ansible.builtin.copy:
    src: instana_env_vars.txt
    dest: "/tmp/instana_env_vars.txt"
    mode: '0644'
  # Copy the file containing environment variables to a temporary location on the target.

- name: Create Instana environment script directory
  ansible.builtin.file:
    path: "{{ instana_env_vars_script | ansible.builtin.dirname }}"
    state: directory
    mode: '0755'
  # Ensure the directory for the environment script (e.g., /etc/profile.d/) exists.

- name: Add/Ensure environment variables in Instana script
  ansible.builtin.lineinfile:
    path: "{{ instana_env_vars_script }}"
    line: "{{ item }}"
    state: present # Ensures the line is present; if it exists, it won't be added again.
    create: true # Create the file if it doesn't exist
    mode: '0644'
    insertafter: EOF # Add lines at the end of the file
  loop: "{{ lookup('ansible.builtin.file', '/tmp/instana_env_vars.txt').splitlines() }}"
  # Similar to host entries, read each line from the env vars file and ensure it's in the script.
  # This also handles idempotency.

- name: Install Instana agent RPM
  ansible.builtin.yum: # Or 'ansible.builtin.dnf' for newer systems
    name: "{{ instana_target_dir }}/{{ instana_rpm_file }}"
    state: present
  # Use the yum module to install the RPM.
  # Yum/dnf are idempotent; they will only install/update if necessary.
  # If the agent is already installed with the same version, this task will report 'changed=false'.

- name: Check Instana agent service status after installation
  ansible.builtin.systemd:
    name: "{{ instana_service_name }}"
    state: started
    enabled: true # Ensure it starts on boot
  # After installation, ensure the service is started and enabled.
  # This task will start it if it's not running, and ensure it's configured to start on boot.
  # It is idempotent: if it's already running and enabled, it will do nothing.
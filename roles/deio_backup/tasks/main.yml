#SPDX-License-Identifier: MIT-0
---
# tasks file for deio_backup
- name: Gather current day of week
  ansible.builtin.set_fact:
    today_day: "{{ lookup('pipe', 'date +%A') }}"

# -------------------------------
# Sunday: skip everything
# -------------------------------
- name: Skipping all steps because today is Sunday
  ansible.builtin.debug:
    msg: "Today is Sunday — no backup or startup actions will run."
  when: today_day == "Sunday"

# -------------------------------
# Check saa_system status
# -------------------------------
#- name: Check saa_system status
#  ansible.builtin.command: "{{ saa_bin }} status"
#  register: saa_status
#  become: true
#  become_user: all_adm
#  ignore_errors: true
#  when: today_day != "Sunday"
#
## -------------------------------
## Stop system (except Monday & Sunday)
## -------------------------------
#- name: Stop saa_system if operational
#  ansible.builtin.command: "{{ saa_bin }} stop"
#  become: true
#  become_user: all_adm
#  when:
#    - today_day not in ["Monday", "Sunday"]
#    - "'operational' in saa_status.stdout"

# -------------------------------
# Backup steps (not Monday, not Sunday)
# -------------------------------
- name: Check utilization of /Archives
  ansible.builtin.shell: "df -h {{ archive_mount }} | awk 'NR==2 {print $5}' | sed 's/%//'"
  register: archive_util
  changed_when: false
  when: today_day not in ["Monday", "Sunday"]

- name: Find backup folders
  ansible.builtin.find:
    paths: "{{ backup_base_dir }}"
    file_type: directory
    patterns: "[0-9]*"
  register: backup_dirs
  when: today_day not in ["Monday", "Sunday"]

- name: Sort backup folders by name (date order)
  ansible.builtin.set_fact:
    sorted_backups: "{{ backup_dirs.files | map(attribute='path') | sort }}"
  when: today_day not in ["Monday", "Sunday"]

- name: Delete 2nd last backup if utilization > threshold
  ansible.builtin.file:
    path: "{{ sorted_backups[-2] }}"
    state: absent
  when:
    - today_day not in ["Monday", "Sunday"]
    - (archive_util.stdout | int) > utilization_threshold
    - sorted_backups | length > 2

- name: Create today’s backup directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "0755"
  loop:
    - "{{ today_backup_dir }}"
    - "{{ today_db_dir }}"
  when: today_day not in ["Monday", "Sunday"]

- name: Copy DBRBackup and DBRMirror
  ansible.builtin.command: "cp -pR {{ item }} {{ today_backup_dir }}/"
  with_items:
    - "{{ dbrbackup_src }}"
    - "{{ dbrmirror_src }}"
  become: true
  #become_user: all_adm
  when: today_day not in ["Monday", "Sunday"]


- name: Find latest SAA_DATA_BACKUP file
  ansible.builtin.shell: |
    ls -1t {{ saa_data_backup_src }}/*SAA_DATA_BACKUP* 2>/dev/null | head -1
  register: latest_backup
  changed_when: false
  failed_when: latest_backup.stdout == ""
  when: today_day not in ["Monday", "Sunday"]

- name: Copy latest SAA_DATA_BACKUP file
  ansible.builtin.command: "cp -p {{ latest_backup.stdout }} {{ today_db_dir }}/"
  become: true
#  become_user: all_adm
  when: today_day not in ["Monday", "Sunday"]



#- name: Find latest SAA_DATA_BACKUP folder
#  ansible.builtin.shell: "ls -1t {{ saa_data_backup_src }} | grep SAA_DATA_BACKUP | head -1"
#  register: latest_backup
#  when: today_day not in ["Monday", "Sunday"]
#
#- name: Copy latest SAA_DATA_BACKUP
#  ansible.builtin.command: "cp -pR {{ saa_data_backup_src }}/{{ latest_backup.stdout }} {{ today_db_dir }}/"
#  become: true
#  become_user: all_adm
#  when: today_day not in ["Monday", "Sunday"]





# -------------------------------
# Restart system (except Saturday & Sunday)
## -------------------------------
#- name: Start saa_system again
#  ansible.builtin.command: "{{ saa_bin }} start operational"
#  become: true
#  become_user: all_adm
#  when: today_day not in ["Saturday", "Sunday"]


# Capture action summary (for report)
- name: Capture DEIO backup action summary
  set_fact:
    deio_backup_result:
      hostname: "{{ inventory_hostname }}"
      day: "{{ today_day }}"
      action_taken: >-
        {% if today_day == "Sunday" %}
          Skipped (Non-working day)
        {% elif today_day == "Monday" %}
          Only Startup performed
        {% elif today_day == "Saturday" %}
          Only Backup performed
        {% else %}
          Backup + Startup performed
        {% endif %}
      backup_dir: "{{ today_backup_dir | default('N/A') }}"
      disk_util: "{{ archive_util.stdout | default('N/A') }}"
      file_copied: "{{ latest_backup.stdout | default('N/A')}}"
      system_status_before: "{{ saa_status.stdout | default('Unknown') }}"
      system_status_after: "{{ system_after_status.stdout | default('Unknown') }}"
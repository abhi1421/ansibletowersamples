---
- name: Ensure Ansible facts are gathered (required for dynamic versioning)
  ansible.builtin.setup:
  delegate_to: "{{ inventory_hostname }}" # Ensure facts are gathered on the target host

- name: Display current RHEL and kernel versions
  ansible.builtin.debug:
    msg:
      - "Current RHEL Version: {{ ansible_distribution_version }}"
      - "Current Kernel Version: {{ ansible_kernel }}"
      - "Target RHEL Version: {{ target_rhel_version }}"


# --- NEW CRITICAL PRE-CHECK ADDITION START ---

#- name: Critical Pre-check # Verify System Subscription Status and DNF Repository Accessibility
#  ansible.builtin.shell: |
#    set -euo pipefail # Exit immediately if a command exits with a non-zero status or undefined variable is used
#
#    # First, verify subscription status is 'Current'
#    # Use || true to prevent grep from failing the script if 'Overall Status' isn't found
#    SUBSCRIPTION_STATUS=$(subscription-manager status | grep 'Overall Status' | awk '{print $3}' || true)
#    if [[ "$SUBSCRIPTION_STATUS" != "Current" ]]; then
#      echo "ERROR: System subscription status is NOT 'Current'. Please ensure the system is properly registered and subscribed." >&2
#      exit 1
#    fi
#
#    # Then, attempt to list enabled DNF repositories to confirm connectivity to Satellite and repository configuration.
#    # Redirect stdout and stderr to /dev/null to keep output clean, we only care about the exit code.
#    echo "Checking DNF repository list for connectivity..."
#    dnf repolist enabled > /dev/null 2>&1
#    if [ $? -ne 0 ]; then
#      echo "ERROR: 'dnf repolist enabled' command failed (exit code $?). This likely indicates an issue with network connectivity to Satellite ({{ satellite_fqdn_or_ip }}) or incorrect repository configuration." >&2
#      echo "Please verify network path, firewall rules, and repository configurations (e.g., in /etc/yum.repos.d/)." >&2
#      exit 1
#    fi
#    echo "System is subscribed and DNF repositories are accessible. Proceeding with upgrade checks."
#  register: satellite_connectivity_check
#  changed_when: false # This task only checks status, doesn't change system state
#  failed_when: satellite_connectivity_check.rc != 0 # Fail the task if the shell script exits with a non-zero code
#  tags:
#    - critical_precheck
#    - satellite_connectivity
# --- NEW CRITICAL PRE-CHECK ADDITION END ---

- name: Include Pre-Patching Checklist
  ansible.builtin.include_tasks: pre_patching_checklist.yml
  when: run_pre_patching_checklist | bool
  tags:
    - pre_patching

# 1. Determine if /usr/sbin/pcs binary exists
- name: Determine if /usr/sbin/pcs binary exists (indicates Pacemaker packages are installed)
  ansible.builtin.stat:
    path: /usr/sbin/pcs
  register: pcs_binary_status
  changed_when: false
  tags:
    - cluster_node_detection

- name: Set fact if host has pcs installed
  ansible.builtin.set_fact:
    has_pcs_installed: "{{ pcs_binary_status.stat.exists | default(false) }}"
  tags:
    - cluster_node_detection

# 2. Check actual pcs cluster status if pcs is installed
- name: Check pcs cluster status to determine if node is online/active
  ansible.builtin.command: pcs cluster status
  register: pcs_online_status_check
  changed_when: false
  failed_when: false # IMPORTANT: Do NOT fail this task even if pcs status returns an error (e.g., cluster is offline)
  when: has_pcs_installed | bool # Only run this command if pcs is actually installed
  tags:
    - cluster_status_check

# 3. Set fact based on 'pcs cluster status' output
- name: Set fact if cluster is currently online on this node
  ansible.builtin.set_fact:
    is_cluster_online: "{{
      (pcs_online_status_check.rc == 0 and 'Cluster Manager status: Online' in pcs_online_status_check.stdout)
      if has_pcs_installed | bool else false
      }}"
  tags:
    - cluster_status_check

# --- NEW ADDITION END ---

# --- EXISTING Cluster Services Management (Stop/Disable) ---
# These tasks will now be SKIPPED if:
# - 'manage_cluster_services' is false (global override)
# - 'has_pcs_installed' is false (pcs not present)
# - 'is_cluster_online' is false (cluster not active/online on this node)
# They will FAIL if they run (i.e., cluster is online) and the command does not succeed.
- name: Execute command to stop cluster services (pcs cluster stop --all)
  ansible.builtin.command: pcs cluster stop --all
  register: pcs_stop_output_main
  changed_when: true
  when: manage_cluster_services | bool and has_pcs_installed | bool and is_cluster_online | bool # <-- UPDATED CONDITION
  tags:
    - cluster_management_main

- name: Execute command to disable cluster services (pcs cluster disable --all)
  ansible.builtin.command: pcs cluster disable --all
  register: pcs_disable_output_main
  changed_when: true
  when: manage_cluster_services | bool and has_pcs_installed | bool and is_cluster_online | bool # <-- UPDATED CONDITION
  tags:
    - cluster_management_main
# --- End Cluster Services Management (Stop/Disable) ---

- name: Include Patch Execution (Same Version Update)
  ansible.builtin.include_tasks: patch_execution_same_version.yml
  when: run_patch_execution_same_version | bool
  tags:
    - patch_same_version

- name: Include Patch Execution (Higher Version Update)
  ansible.builtin.include_tasks: patch_execution_higher_version.yml
  when: run_patch_execution_higher_version | bool
  tags:
    - patch_higher_version

# --- EXISTING Cluster Services Management (Enable/Start) ---
# These tasks will run if:
# - 'manage_cluster_services' is true (global override)
# - 'has_pcs_installed' is true (pcs is present)
# They will FAIL if they run and the command does not succeed.
# We don't check 'is_cluster_online' here, as we want to attempt to bring it online.
- name: Execute command to enable cluster services (pcs cluster enable --all)
  ansible.builtin.command: pcs cluster enable --all
  register: pcs_enable_output_main
  changed_when: true
  when: manage_cluster_services | bool and has_pcs_installed | bool # <-- UPDATED CONDITION (removed is_cluster_online)
  tags:
    - cluster_management_main

- name: Execute command to start cluster services (pcs cluster start --all)
  ansible.builtin.command: pcs cluster start --all
  register: pcs_start_output_main
  changed_when: true
  when: manage_cluster_services | bool and has_pcs_installed | bool # <-- UPDATED CONDITION (removed is_cluster_online)
  tags:
    - cluster_management_main
# --- End Existing Cluster Services Management (Enable/Start) ---

- name: Include Post-Patching Checklist
  ansible.builtin.include_tasks: post_patching_checklist.yml
  when: run_post_patching_checklist | bool
  tags:
    - post_patching